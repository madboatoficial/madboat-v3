/**
 * üêô AUTO-GENERATED BY MCP - DON'T EDIT MANUALLY
 * Generated on: 2025-09-03
 * Source: Supabase MadBoat Dev Database
 * MCP Command: mcp__supabase__generate_typescript_types
 */

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  // Allows to automatically instantiate createClient with right options
  // instead of createClient<Database, { PostgrestVersion: 'XX' }>(URL, KEY)
  __InternalSupabase: {
    PostgrestVersion: "13.0.4"
  }
  public: {
    Tables: {
      achievements: {
        Row: {
          badge_color: string | null
          category: string
          code: string
          created_at: string
          description: string
          difficulty: string
          icon_name: string
          id: string
          is_active: boolean
          is_hidden: boolean
          name: string
          required_level: number
          required_persona_id: string | null
          required_world_id: string | null
          sort_order: number
          unlock_conditions: Json
          unlocks_feature: string | null
          updated_at: string
          xp_reward: number
        }
        Insert: {
          badge_color?: string | null
          category: string
          code: string
          created_at?: string
          description: string
          difficulty: string
          icon_name: string
          id?: string
          is_active?: boolean
          is_hidden?: boolean
          name: string
          required_level?: number
          required_persona_id?: string | null
          required_world_id?: string | null
          sort_order?: number
          unlock_conditions?: Json
          unlocks_feature?: string | null
          updated_at?: string
          xp_reward?: number
        }
        Update: {
          badge_color?: string | null
          category?: string
          code?: string
          created_at?: string
          description?: string
          difficulty?: string
          icon_name?: string
          id?: string
          is_active?: boolean
          is_hidden?: boolean
          name?: string
          required_level?: number
          required_persona_id?: string | null
          required_world_id?: string | null
          sort_order?: number
          unlock_conditions?: Json
          unlocks_feature?: string | null
          updated_at?: string
          xp_reward?: number
        }
        Relationships: [
          {
            foreignKeyName: "achievements_required_persona_id_fkey"
            columns: ["required_persona_id"]
            isOneToOne: false
            referencedRelation: "personas"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "achievements_required_world_id_fkey"
            columns: ["required_world_id"]
            isOneToOne: false
            referencedRelation: "worlds"
            referencedColumns: ["id"]
          },
        ]
      }
      personas: {
        Row: {
          characteristics: Json
          code: string
          created_at: string
          description: string
          gamification_style: string
          id: string
          is_active: boolean
          name: string
          unlock_level: number
          updated_at: string
          world_id: string
          xp_multiplier: number
        }
        Insert: {
          characteristics?: Json
          code: string
          created_at?: string
          description: string
          gamification_style: string
          id?: string
          is_active?: boolean
          name: string
          unlock_level?: number
          updated_at?: string
          world_id: string
          xp_multiplier?: number
        }
        Update: {
          characteristics?: Json
          code?: string
          created_at?: string
          description?: string
          gamification_style?: string
          id?: string
          is_active?: boolean
          name?: string
          unlock_level?: number
          updated_at?: string
          world_id?: string
          xp_multiplier?: number
        }
        Relationships: [
          {
            foreignKeyName: "personas_world_id_fkey"
            columns: ["world_id"]
            isOneToOne: false
            referencedRelation: "worlds"
            referencedColumns: ["id"]
          },
        ]
      }
      profiles: {
        Row: {
          avatar_url: string | null
          bio: string | null
          birth_date: string | null
          created_at: string
          current_level: number
          current_persona_id: string | null
          current_world_id: string | null
          data_processing_consent: boolean
          data_processing_consent_at: string | null
          display_name: string | null
          email: string
          email_verified_at: string | null
          full_name: string
          id: string
          language: string
          last_login_at: string | null
          last_persona_change_at: string | null
          level_progress: number
          marketing_emails: boolean
          notifications_enabled: boolean
          onboarding_completed: boolean
          onboarding_step: number
          persona_changes_count: number
          persona_selected_at: string | null
          privacy_analytics: boolean
          privacy_marketing: boolean
          privacy_personalization: boolean
          status: string
          subscription_expires_at: string | null
          subscription_tier: string
          theme: string
          timezone: string
          total_xp: number
          trial_expires_at: string | null
          trial_used: boolean
          updated_at: string
        }
        Insert: {
          avatar_url?: string | null
          bio?: string | null
          birth_date?: string | null
          created_at?: string
          current_level?: number
          current_persona_id?: string | null
          current_world_id?: string | null
          data_processing_consent?: boolean
          data_processing_consent_at?: string | null
          display_name?: string | null
          email: string
          email_verified_at?: string | null
          full_name: string
          id: string
          language?: string
          last_login_at?: string | null
          last_persona_change_at?: string | null
          level_progress?: number
          marketing_emails?: boolean
          notifications_enabled?: boolean
          onboarding_completed?: boolean
          onboarding_step?: number
          persona_changes_count?: number
          persona_selected_at?: string | null
          privacy_analytics?: boolean
          privacy_marketing?: boolean
          privacy_personalization?: boolean
          status?: string
          subscription_expires_at?: string | null
          subscription_tier?: string
          theme?: string
          timezone?: string
          total_xp?: number
          trial_expires_at?: string | null
          trial_used?: boolean
          updated_at?: string
        }
        Update: {
          avatar_url?: string | null
          bio?: string | null
          birth_date?: string | null
          created_at?: string
          current_level?: number
          current_persona_id?: string | null
          current_world_id?: string | null
          data_processing_consent?: boolean
          data_processing_consent_at?: string | null
          display_name?: string | null
          email?: string
          email_verified_at?: string | null
          full_name?: string
          id?: string
          language?: string
          last_login_at?: string | null
          last_persona_change_at?: string | null
          level_progress?: number
          marketing_emails?: boolean
          notifications_enabled?: boolean
          onboarding_completed?: boolean
          onboarding_step?: number
          persona_changes_count?: number
          persona_selected_at?: string | null
          privacy_analytics?: boolean
          privacy_marketing?: boolean
          privacy_personalization?: boolean
          status?: string
          subscription_expires_at?: string | null
          subscription_tier?: string
          theme?: string
          timezone?: string
          total_xp?: number
          trial_expires_at?: string | null
          trial_used?: boolean
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "profiles_current_persona_id_fkey"
            columns: ["current_persona_id"]
            isOneToOne: false
            referencedRelation: "personas"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "profiles_current_world_id_fkey"
            columns: ["current_world_id"]
            isOneToOne: false
            referencedRelation: "worlds"
            referencedColumns: ["id"]
          },
        ]
      }
      user_achievements: {
        Row: {
          achievement_id: string
          completed_at: string | null
          completion_context: Json | null
          created_at: string
          id: string
          notified_at: string | null
          persona_id: string | null
          progress_current: number
          progress_percentage: number
          progress_required: number
          status: string
          updated_at: string
          user_id: string
        }
        Insert: {
          achievement_id: string
          completed_at?: string | null
          completion_context?: Json | null
          created_at?: string
          id?: string
          notified_at?: string | null
          persona_id?: string | null
          progress_current?: number
          progress_percentage?: number
          progress_required?: number
          status?: string
          updated_at?: string
          user_id: string
        }
        Update: {
          achievement_id?: string
          completed_at?: string | null
          completion_context?: Json | null
          created_at?: string
          id?: string
          notified_at?: string | null
          persona_id?: string | null
          progress_current?: number
          progress_percentage?: number
          progress_required?: number
          status?: string
          updated_at?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "user_achievements_achievement_id_fkey"
            columns: ["achievement_id"]
            isOneToOne: false
            referencedRelation: "achievements"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_achievements_persona_id_fkey"
            columns: ["persona_id"]
            isOneToOne: false
            referencedRelation: "personas"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_achievements_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      user_personas: {
        Row: {
          achievements_unlocked: number
          created_at: string
          goals_completed: number
          id: string
          last_used_at: string
          persona_id: string
          persona_level: number
          persona_xp: number
          selected_at: string
          streaks_maintained: number
          times_selected: number
          total_usage_hours: number
          updated_at: string
          user_id: string
        }
        Insert: {
          achievements_unlocked?: number
          created_at?: string
          goals_completed?: number
          id?: string
          last_used_at?: string
          persona_id: string
          persona_level?: number
          persona_xp?: number
          selected_at?: string
          streaks_maintained?: number
          times_selected?: number
          total_usage_hours?: number
          updated_at?: string
          user_id: string
        }
        Update: {
          achievements_unlocked?: number
          created_at?: string
          goals_completed?: number
          id?: string
          last_used_at?: string
          persona_id?: string
          persona_level?: number
          persona_xp?: number
          selected_at?: string
          streaks_maintained?: number
          times_selected?: number
          total_usage_hours?: number
          updated_at?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "user_personas_persona_id_fkey"
            columns: ["persona_id"]
            isOneToOne: false
            referencedRelation: "personas"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_personas_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      worlds: {
        Row: {
          code: string
          color_primary: string
          color_secondary: string
          created_at: string
          description: string
          icon_name: string
          id: string
          is_active: boolean
          name: string
          sort_order: number
          updated_at: string
        }
        Insert: {
          code: string
          color_primary: string
          color_secondary: string
          created_at?: string
          description: string
          icon_name: string
          id?: string
          is_active?: boolean
          name: string
          sort_order?: number
          updated_at?: string
        }
        Update: {
          code?: string
          color_primary?: string
          color_secondary?: string
          created_at?: string
          description?: string
          icon_name?: string
          id?: string
          is_active?: boolean
          name?: string
          sort_order?: number
          updated_at?: string
        }
        Relationships: []
      }
      xp_events: {
        Row: {
          base_xp: number
          created_at: string
          description: string | null
          event_category: string
          event_data: Json
          event_type: string
          id: string
          multiplier_applied: number
          occurred_at: string
          persona_id: string | null
          processed_at: string | null
          source_id: string | null
          user_id: string
          xp_awarded: number
        }
        Insert: {
          base_xp: number
          created_at?: string
          description?: string | null
          event_category: string
          event_data?: Json
          event_type: string
          id?: string
          multiplier_applied?: number
          occurred_at?: string
          persona_id?: string | null
          processed_at?: string | null
          source_id?: string | null
          user_id: string
          xp_awarded: number
        }
        Update: {
          base_xp?: number
          created_at?: string
          description?: string | null
          event_category?: string
          event_data?: Json
          event_type?: string
          id?: string
          multiplier_applied?: number
          occurred_at?: string
          persona_id?: string | null
          processed_at?: string | null
          source_id?: string | null
          user_id?: string
          xp_awarded?: number
        }
        Relationships: [
          {
            foreignKeyName: "xp_events_persona_id_fkey"
            columns: ["persona_id"]
            isOneToOne: false
            referencedRelation: "personas"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "xp_events_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      award_xp: {
        Args: {
          base_xp_param: number
          description_param?: string
          event_data_param?: Json
          event_type_param: string
          user_uuid: string
        }
        Returns: string
      }
      calculate_xp_for_level: {
        Args: { level_num: number }
        Returns: number
      }
      emergency_activate_user: {
        Args: { user_email: string }
        Returns: string
      }
      test_user_credentials: {
        Args: { user_email: string }
        Returns: {
          account_active: boolean
          can_login: string
          email: string
          email_confirmed: boolean
          profile_exists: boolean
          user_exists: boolean
        }[]
      }
      update_user_level: {
        Args: { user_uuid: string }
        Returns: undefined
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DatabaseWithoutInternals = Omit<Database, "__InternalSupabase">

type DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof DatabaseWithoutInternals },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof DatabaseWithoutInternals },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  public: {
    Enums: {},
  },
} as const