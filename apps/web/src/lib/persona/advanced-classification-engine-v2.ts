/**
 * üß¨ ADVANCED CLASSIFICATION ENGINE V2.0
 * Sistema de Classifica√ß√£o para 26 Personas √önicas - Nova Gera√ß√£o
 * Implementa quest√µes h√≠bridas: open_ended, multiple_choice, dual_range_slider,
 * visual_analog_scale, situational_judgment, reaction_time
 *
 * Baseado na arquitetura cient√≠fica h√≠brida para precis√£o 90%+
 */

import { PersonaQuestion } from './questions'

// 26 Personas Completas
export const ALL_PERSONAS_V2 = [
  'analitico', 'criativo', 'estrategico', 'executor', 'inovador', 'lider',
  'comunicador', 'colaborativo', 'resiliente', 'adaptavel', 'visionario', 'pragmatico',
  'empatico', 'competitivo', 'detalhista', 'intuitivo', 'metodico', 'inspirador',
  'negociador', 'investigador', 'mentor', 'aventureiro', 'tradicionalista', 'transformador',
  'harmonizador', 'disruptor'
] as const

export type PersonaV2 = typeof ALL_PERSONAS_V2[number]

// Configura√ß√£o de Pesos Cient√≠ficos
export const QUESTION_WEIGHTS = {
  SEMANTIC_ANALYSIS: 3.0,      // Primeira quest√£o aberta - r=0.850
  BEHAVIORAL_UNDER_PRESSURE: 2.0,  // Quest√µes 8-9 - comportamento sob stress
  DUAL_RANGE_SLIDER: 3.0,     // Quest√µes 10-11 - variabilidade comportamental
  REACTION_TIME: 2.0,         // Quest√£o 12 - medidas impl√≠citas <800ms
  SITUATIONAL_JUDGMENT: 4.0,  // Quest√£o 13 - valida√ß√£o contextual m√°xima
  VISUAL_ANALOG_SCALE: 2.5,   // Quest√£o 14 - redu√ß√£o de bias
  FORCED_CHOICE: 3.0,         // Quest√£o 15 - anti-social desirability
  CONSISTENCY_CHECK: 1.5,     // Quest√£o 16 - reliability check
  MULTIPLE_CHOICE: 1.0        // Quest√µes b√°sicas
}

// Mapeamento de Personas B√°sicas para 26 Personas
export const PERSONA_MAPPING_V2 = {
  ANALITICO: {
    primary: 'analitico',
    related: ['investigador', 'detalhista', 'metodico', 'estrategico'],
    weights: [1.0, 0.8, 0.7, 0.6, 0.5]
  },
  PRAGMATICO: {
    primary: 'pragmatico',
    related: ['executor', 'tradicionalista', 'negociador', 'competitivo'],
    weights: [1.0, 0.8, 0.7, 0.6, 0.5]
  },
  EMOTIVO: {
    primary: 'empatico',
    related: ['harmonizador', 'comunicador', 'mentor', 'inspirador'],
    weights: [1.0, 0.8, 0.7, 0.6, 0.5]
  },
  CRIATIVO: {
    primary: 'criativo',
    related: ['inovador', 'visionario', 'transformador', 'disruptor'],
    weights: [1.0, 0.8, 0.7, 0.6, 0.5]
  },
  INSEGURO: {
    primary: 'colaborativo',
    related: ['resiliente', 'adaptavel', 'aventureiro', 'lider'],
    weights: [1.0, 0.8, 0.7, 0.6, 0.5]
  }
}

// Interface de Resultado
export interface PersonaResultV2 {
  personaDisplayName: string
  confidence: number
  description: string
  responses: string[]
  personaScores: Array<[string, number]>
  totalAnalyzed: number
  dominantPersonas: PersonaV2[]
  personaComposition: 'pure' | 'dual' | 'triple' | 'complex'
  rarityLevel: 'very_common' | 'common' | 'rare' | 'very_rare' | 'extremely_rare'
  populationPercentage: number
  businessImpact: string
  transformationPotential: string
  detailedAnalysis: {
    semanticScore: number
    behavioralScore: number
    consistencyScore: number
    reactionTimeScore: number
    sliderVariability: number
  }
}

/**
 * MOTOR DE CLASSIFICA√á√ÉO PRINCIPAL V2.0
 * Processa todas as 17 quest√µes com pesos cient√≠ficos
 */
export function classifyPersonaAdvancedV2(
  responses: string[],
  questions: PersonaQuestion[]
): PersonaResultV2 {

  // Inicializar scores para todas as 26 personas
  const personaScores: Record<PersonaV2, number> = {} as Record<PersonaV2, number>
  ALL_PERSONAS_V2.forEach(persona => {
    personaScores[persona] = 0
  })

  let semanticScore = 0
  let behavioralScore = 0
  let consistencyScore = 0
  let reactionTimeScore = 0
  let sliderVariability = 0

  // Processar cada resposta
  responses.forEach((response, index) => {
    const question = questions[index]
    if (!question) return

    const weight = question.weight || 1

    // Processar por tipo de quest√£o
    switch (question.type) {
      case 'open_ended':
        if (index === 0) {
          // Primeira quest√£o - an√°lise sem√¢ntica profunda
          const semanticAnalysis = analyzeSemanticPatternsV2(response)
          semanticScore = semanticAnalysis.totalScore

          Object.entries(semanticAnalysis.personaScores).forEach(([persona, score]) => {
            if (personaScores[persona as PersonaV2] !== undefined) {
              personaScores[persona as PersonaV2] += score * QUESTION_WEIGHTS.SEMANTIC_ANALYSIS
            }
          })
        }
        break

      case 'multiple_choice':
        // Processar m√∫ltipla escolha com peso vari√°vel
        const selectedOption = question.options.find(opt => opt.text === response)
        if (selectedOption?.persona) {
          const basicPersona = selectedOption.persona
          const mapping = PERSONA_MAPPING_V2[basicPersona]

          if (mapping) {
            // Persona principal
            personaScores[mapping.primary] += weight * QUESTION_WEIGHTS.MULTIPLE_CHOICE

            // Personas relacionadas com pesos decrescentes
            mapping.related.forEach((relatedPersona, idx) => {
              if (personaScores[relatedPersona as PersonaV2] !== undefined) {
                personaScores[relatedPersona as PersonaV2] +=
                  weight * QUESTION_WEIGHTS.MULTIPLE_CHOICE * mapping.weights[idx + 1]
              }
            })
          }

          // Score adicional para quest√µes comportamentais
          if (index >= 8 && index <= 9) {
            behavioralScore += weight * QUESTION_WEIGHTS.BEHAVIORAL_UNDER_PRESSURE
          }

          // Score de consist√™ncia para quest√£o 16
          if (index === 16) {
            consistencyScore += weight * QUESTION_WEIGHTS.CONSISTENCY_CHECK
          }
        }
        break

      case 'dual_range_slider':
        // Processar sliders com alta variabilidade comportamental
        const sliderValue = parseFloat(response) || 50
        sliderVariability += Math.abs(50 - sliderValue) // Desvio do centro

        // Distribuir pontua√ß√£o baseada na posi√ß√£o do slider
        distributeSliderScore(personaScores, sliderValue, QUESTION_WEIGHTS.DUAL_RANGE_SLIDER * weight)
        break

      case 'visual_analog_scale':
        // Processar escala visual anal√≥gica (redu√ß√£o de bias)
        const vasValue = parseFloat(response) || 50
        distributeSliderScore(personaScores, vasValue, QUESTION_WEIGHTS.VISUAL_ANALOG_SCALE * weight)
        break

      case 'reaction_time':
        // Processar tempo de rea√ß√£o (medidas impl√≠citas)
        reactionTimeScore += QUESTION_WEIGHTS.REACTION_TIME * weight

        // Mapear palavra escolhida para personas
        const reactionMapping = getReactionTimeMapping(response)
        Object.entries(reactionMapping).forEach(([persona, score]) => {
          if (personaScores[persona as PersonaV2] !== undefined) {
            personaScores[persona as PersonaV2] += score * QUESTION_WEIGHTS.REACTION_TIME * weight
          }
        })
        break

      case 'situational_judgment':
        // Processar julgamento situacional (maior peso)
        const judgmentAnalysis = analyzeSituationalJudgment(response)
        Object.entries(judgmentAnalysis).forEach(([persona, score]) => {
          if (personaScores[persona as PersonaV2] !== undefined) {
            personaScores[persona as PersonaV2] += score * QUESTION_WEIGHTS.SITUATIONAL_JUDGMENT * weight
          }
        })
        break

      default:
        // Distribui√ß√£o b√°sica para tipos n√£o especificados
        const baseScore = weight * 0.1
        ALL_PERSONAS_V2.forEach(persona => {
          personaScores[persona] += baseScore
        })
    }
  })

  // Encontrar personas dominantes
  const sortedPersonas = Object.entries(personaScores)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 3) as Array<[PersonaV2, number]>

  const topPersona = sortedPersonas[0]
  const dominantPersonas = sortedPersonas
    .filter(([, score]) => score >= topPersona[1] * 0.7) // 70% do score m√°ximo
    .map(([persona]) => persona)

  // Calcular confian√ßa baseada na distribui√ß√£o
  const confidence = calculateConfidenceV2(sortedPersonas, personaScores)

  // Determinar composi√ß√£o da persona
  const personaComposition = determinePersonaCompositionV2(dominantPersonas)

  // Formatar resultado
  const personaDisplayName = formatPersonaDisplayName(dominantPersonas)
  const description = getPersonaDescriptionV2(dominantPersonas[0], personaComposition)
  const rarityInfo = getRarityInfoV2(personaComposition, dominantPersonas)

  return {
    personaDisplayName,
    confidence,
    description,
    responses,
    personaScores: sortedPersonas,
    totalAnalyzed: responses.length,
    dominantPersonas,
    personaComposition,
    rarityLevel: rarityInfo.level,
    populationPercentage: rarityInfo.percentage,
    businessImpact: getBusinessImpactV2(dominantPersonas[0]),
    transformationPotential: getTransformationPotentialV2(dominantPersonas[0]),
    detailedAnalysis: {
      semanticScore,
      behavioralScore,
      consistencyScore,
      reactionTimeScore,
      sliderVariability
    }
  }
}

// An√°lise sem√¢ntica avan√ßada para primeira quest√£o
function analyzeSemanticPatternsV2(text: string): {
  personaScores: Record<string, number>,
  totalScore: number
} {
  const textLower = text.toLowerCase()
  const scores: Record<string, number> = {}

  // Inicializar scores
  ALL_PERSONAS_V2.forEach(persona => scores[persona] = 0)

  // Padr√µes sem√¢nticos avan√ßados
  const semanticPatterns = {
    analitico: {
      keywords: ['dados', 'an√°lise', 'pesquisa', 'evid√™ncia', 'l√≥gica', 'sistem√°tico', 'm√©tricas', 'comparar', 'avaliar', 'estudar'],
      patterns: [/\b(primeiro|segundo|terceiro|por fim)\b/gi, /\d+%|\d+\s*(dados|estat√≠stica)/gi]
    },
    criativo: {
      keywords: ['criatividade', 'inova√ß√£o', 'imaginar', 'inventar', 'arte', 'original', '√∫nico', 'inspira√ß√£o', 'design', 'criar'],
      patterns: [/\b(imagine|se fosse|e se)\b/gi, /[!]{2,}|\.{3,}/g]
    },
    estrategico: {
      keywords: ['plano', 'estrat√©gia', 'longo prazo', 'vis√£o', 'objetivo', 'meta', 'futuro', 'planejamento'],
      patterns: [/\b(no futuro|a longo prazo|estrategicamente)\b/gi]
    },
    executor: {
      keywords: ['fazer', 'a√ß√£o', 'implementar', 'executar', 'resultado', 'pr√°tico', 'eficiente', 'realizar'],
      patterns: [/\b(fazer|executar|implementar|realizar|agir)\b/gi]
    },
    empatico: {
      keywords: ['sentimentos', 'pessoas', 'emo√ß√£o', 'compreens√£o', 'ajudar', 'cuidar', 'empathy', 'humano'],
      patterns: [/\b(sinto que|acredito que|as pessoas)\b/gi]
    },
    lider: {
      keywords: ['liderar', 'equipe', 'guiar', 'inspirar', 'comandar', 'dire√ß√£o', 'lideran√ßa', 'motivar'],
      patterns: [/\b(lidero|conduzo|oriento|motivo)\b/gi]
    }
  }

  // Analisar padr√µes
  Object.entries(semanticPatterns).forEach(([persona, config]) => {
    let score = 0

    // Pontua√ß√£o por palavras-chave
    config.keywords.forEach(keyword => {
      const matches = (textLower.match(new RegExp(keyword, 'g')) || []).length
      score += matches * 2
    })

    // Pontua√ß√£o por padr√µes regex
    config.patterns?.forEach(pattern => {
      const matches = (text.match(pattern) || []).length
      score += matches * 3
    })

    scores[persona] = score
  })

  // An√°lise de comprimento e complexidade
  const totalWords = text.split(/\s+/).length
  const avgWordLength = text.length / totalWords
  const complexityBonus = avgWordLength > 6 ? 2 : 0

  // Distribuir bonus de complexidade
  if (complexityBonus > 0) {
    scores.analitico += complexityBonus
    scores.estrategico += complexityBonus
  }

  const totalScore = Object.values(scores).reduce((a, b) => a + b, 0)

  return { personaScores: scores, totalScore }
}

// Distribuir pontua√ß√£o baseada em posi√ß√£o de slider
function distributeSliderScore(
  personaScores: Record<PersonaV2, number>,
  sliderValue: number,
  weight: number
) {
  // Mapeamento de posi√ß√µes de slider para personas
  if (sliderValue < 25) {
    // Lado esquerdo - personas mais colaborativas/emp√°ticas
    personaScores.empatico += weight * 0.8
    personaScores.colaborativo += weight * 0.6
    personaScores.harmonizador += weight * 0.4
  } else if (sliderValue > 75) {
    // Lado direito - personas mais anal√≠ticas/competitivas
    personaScores.analitico += weight * 0.8
    personaScores.competitivo += weight * 0.6
    personaScores.lider += weight * 0.4
  } else {
    // Centro - personas equilibradas
    personaScores.adaptavel += weight * 0.6
    personaScores.resiliente += weight * 0.4
    personaScores.metodico += weight * 0.3
  }
}

// Mapear escolha de tempo de rea√ß√£o para personas
function getReactionTimeMapping(selectedWord: string): Record<string, number> {
  const mappings: Record<string, Record<string, number>> = {
    'LIDERAN√áA': {
      lider: 4,
      executor: 3,
      competitivo: 2,
      visionario: 2
    },
    'CONTROLE': {
      analitico: 4,
      metodico: 3,
      detalhista: 2,
      tradicionalista: 2
    },
    'HARMONIA': {
      empatico: 4,
      harmonizador: 3,
      colaborativo: 2,
      mentor: 2
    }
  }

  return mappings[selectedWord] || {}
}

// Analisar julgamento situacional (drag & drop ranking)
function analyzeSituationalJudgment(response: string): Record<string, number> {
  const scores: Record<string, number> = {}

  // Analisar ordem de prioridades na resposta
  if (response.includes('An√°lise imediata')) {
    scores.analitico = 4
    scores.investigador = 3
  }

  if (response.includes('Reuni√£o de alinhamento')) {
    scores.empatico = 4
    scores.comunicador = 3
  }

  if (response.includes('A√ß√£o comercial')) {
    scores.executor = 4
    scores.pragmatico = 3
  }

  if (response.includes('Comunica√ß√£o √† diretoria')) {
    scores.lider = 3
    scores.comunicador = 2
  }

  return scores
}

// Calcular confian√ßa baseada na distribui√ß√£o de scores
function calculateConfidenceV2(
  sortedPersonas: Array<[PersonaV2, number]>,
  allScores: Record<PersonaV2, number>
): number {
  if (sortedPersonas.length === 0) return 50

  const topScore = sortedPersonas[0][1]
  const secondScore = sortedPersonas[1]?.[1] || 0
  const gap = topScore - secondScore

  const totalScore = Object.values(allScores).reduce((a, b) => a + b, 0)
  const dominance = totalScore > 0 ? (topScore / totalScore) * 100 : 0

  // F√≥rmula de confian√ßa: domin√¢ncia + gap entre top 2
  const confidence = Math.min(95, Math.max(65, dominance + (gap * 2)))

  return Math.round(confidence)
}

// Determinar composi√ß√£o da persona
function determinePersonaCompositionV2(
  dominantPersonas: PersonaV2[]
): 'pure' | 'dual' | 'triple' | 'complex' {
  if (dominantPersonas.length === 1) return 'pure'
  if (dominantPersonas.length === 2) return 'dual'
  if (dominantPersonas.length === 3) return 'triple'
  return 'complex'
}

// Formatar nome de exibi√ß√£o da persona
function formatPersonaDisplayName(dominantPersonas: PersonaV2[]): string {
  if (dominantPersonas.length === 1) {
    return dominantPersonas[0].charAt(0).toUpperCase() + dominantPersonas[0].slice(1)
  }

  return dominantPersonas
    .slice(0, 3)
    .map(p => p.charAt(0).toUpperCase() + p.slice(1))
    .join('-')
}

// Obter descri√ß√£o da persona
function getPersonaDescriptionV2(
  primaryPersona: PersonaV2,
  composition: 'pure' | 'dual' | 'triple' | 'complex'
): string {
  const descriptions: Record<PersonaV2, string> = {
    analitico: "Voc√™ √© uma pessoa que valoriza dados, l√≥gica e an√°lise profunda antes de tomar decis√µes. Sua mente processa informa√ß√µes sistematicamente.",
    criativo: "Sua mente √© um universo de possibilidades, sempre buscando formas inovadoras de resolver problemas e criar solu√ß√µes √∫nicas.",
    estrategico: "Voc√™ tem a habilidade natural de ver o quadro geral e planejar movimentos de longo prazo com vis√£o estrat√©gica.",
    executor: "Sua for√ßa est√° em transformar ideias em realidade atrav√©s de a√ß√£o pr√°tica, determinada e focada em resultados.",
    inovador: "Voc√™ questiona o status quo e constantemente busca maneiras de melhorar, revolucionar e criar o novo.",
    lider: "Naturalmente, as pessoas se sentem inspiradas por sua vis√£o e capacidade de guiar equipes rumo aos objetivos.",
    comunicador: "Sua habilidade de transmitir ideias e conectar pessoas atrav√©s da comunica√ß√£o √© excepcional.",
    colaborativo: "Voc√™ acredita que os melhores resultados v√™m do trabalho em equipe, coopera√ß√£o e sinergia entre pessoas.",
    resiliente: "Sua capacidade de se adaptar, superar desafios e se recuperar de adversidades √© uma de suas maiores for√ßas.",
    adaptavel: "Voc√™ flui com as mudan√ßas e encontra oportunidades onde outros veem obst√°culos, sendo flex√≠vel em qualquer situa√ß√£o.",
    visionario: "Voc√™ enxerga possibilidades futuras que outros ainda n√£o conseguem perceber, antecipando tend√™ncias e oportunidades.",
    pragmatico: "Sua abordagem pr√°tica e realista te permite encontrar solu√ß√µes eficientes e funcionais para qualquer problema.",
    empatico: "Sua capacidade de compreender e se conectar com as emo√ß√µes dos outros √© not√°vel, criando v√≠nculos aut√™nticos.",
    competitivo: "Voc√™ tem uma drive natural para vencer, alcan√ßar a excel√™ncia e superar desafios com determina√ß√£o.",
    detalhista: "Sua aten√ß√£o meticulosa aos detalhes garante qualidade, precis√£o e perfei√ß√£o em tudo que voc√™ executa.",
    intuitivo: "Voc√™ confia em sua intui√ß√£o e frequentemente 'sente' a resposta certa, guiado por sua sabedoria interna.",
    metodico: "Sua abordagem sistem√°tica e bem organizada te leva a resultados consistentes e processos bem estruturados.",
    inspirador: "Voc√™ tem o dom natural de motivar e elevar o potencial das pessoas ao seu redor atrav√©s do exemplo.",
    negociador: "Sua habilidade de encontrar pontos de converg√™ncia e criar acordos ben√©ficos para todos √© excepcional.",
    investigador: "Sua curiosidade natural te leva a sempre questionar, pesquisar profundamente e buscar a verdade por tr√°s dos fatos.",
    mentor: "Voc√™ tem prazer e talento para desenvolver, orientar e guiar outras pessoas em suas jornadas de crescimento.",
    aventureiro: "Voc√™ busca constantemente novas experi√™ncias, desafios emocionantes e oportunidades de explorar o desconhecido.",
    tradicionalista: "Voc√™ valoriza m√©todos testados e comprovados, construindo sobre bases s√≥lidas e preservando o que funciona.",
    transformador: "Voc√™ tem a capacidade √∫nica de catalizar mudan√ßas significativas e transformar realidades ao seu redor.",
    harmonizador: "Sua habilidade de criar equil√≠brio, paz e harmonia em ambientes complexos e conflituosos √© valiosa.",
    disruptor: "Voc√™ questiona conven√ß√µes, quebra paradigmas e cria mudan√ßas revolucion√°rias quando necess√°rio."
  }

  const baseDescription = descriptions[primaryPersona] || "Sua persona √∫nica foi identificada com base em suas respostas."

  if (composition === 'pure') {
    return baseDescription
  } else {
    return `${baseDescription} Voc√™ apresenta uma combina√ß√£o √∫nica de caracter√≠sticas que te torna vers√°til e adapt√°vel.`
  }
}

// Obter informa√ß√µes de raridade
function getRarityInfoV2(
  composition: 'pure' | 'dual' | 'triple' | 'complex',
  dominantPersonas: PersonaV2[]
): { level: 'very_common' | 'common' | 'rare' | 'very_rare' | 'extremely_rare', percentage: number } {
  const rarityMap = {
    pure: { level: 'common' as const, percentage: 8 },
    dual: { level: 'rare' as const, percentage: 3 },
    triple: { level: 'very_rare' as const, percentage: 1 },
    complex: { level: 'extremely_rare' as const, percentage: 0.2 }
  }

  return rarityMap[composition]
}

// Obter impacto nos neg√≥cios
function getBusinessImpactV2(persona: PersonaV2): string {
  const impacts: Record<PersonaV2, string> = {
    analitico: "Tomada de decis√£o baseada em dados. Estrat√©gias fundamentadas com ROI comprovado.",
    criativo: "Inova√ß√£o constante e solu√ß√µes √∫nicas. Cria mercados inexplorados e produtos disruptivos.",
    estrategico: "Vis√£o de longo prazo e planejamento estrat√©gico. Antecipa tend√™ncias e oportunidades.",
    executor: "Execu√ß√£o r√°pida e resultados concretos. Transforma planos em realidade com efici√™ncia.",
    inovador: "Disrup√ß√£o positiva e renova√ß√£o constante. Mant√©m a empresa √† frente da concorr√™ncia.",
    lider: "Lideran√ßa inspiradora e constru√ß√£o de equipes de alta performance.",
    comunicador: "Constru√ß√£o de relacionamentos s√≥lidos e comunica√ß√£o eficaz com stakeholders.",
    colaborativo: "Sinergia em equipes e ambientes colaborativos de alta produtividade.",
    resiliente: "Adapta√ß√£o a crises e recupera√ß√£o r√°pida de adversidades empresariais.",
    adaptavel: "Flexibilidade em mercados vol√°teis e capacidade de pivotagem estrat√©gica.",
    visionario: "Antecipa√ß√£o de tend√™ncias e identifica√ß√£o de oportunidades futuras.",
    pragmatico: "Solu√ß√µes pr√°ticas e eficientes. Elimina desperd√≠cios e maximiza resultados.",
    empatico: "Lideran√ßa humana e constru√ß√£o de culturas organizacionais saud√°veis.",
    competitivo: "Drive por excel√™ncia e supera√ß√£o constante de metas e resultados.",
    detalhista: "Qualidade superior e processos livres de erros. Padr√µes de excel√™ncia.",
    intuitivo: "Tomada de decis√£o r√°pida em cen√°rios de incerteza e ambiguidade.",
    metodico: "Processos estruturados e resultados consistentes e previs√≠veis.",
    inspirador: "Motiva√ß√£o de equipes e cria√ß√£o de culturas de alta performance.",
    negociador: "Fechamento de acordos complexos e resolu√ß√£o de conflitos empresariais.",
    investigador: "Due diligence profunda e an√°lise de riscos e oportunidades.",
    mentor: "Desenvolvimento de talentos e constru√ß√£o de pipelines de lideran√ßa.",
    aventureiro: "Explora√ß√£o de novos mercados e oportunidades de crescimento.",
    tradicionalista: "Estabilidade e preserva√ß√£o de valores e processos que funcionam.",
    transformador: "Lideran√ßa de mudan√ßas organizacionais e transforma√ß√µes digitais.",
    harmonizador: "Media√ß√£o de conflitos e cria√ß√£o de ambientes de trabalho equilibrados.",
    disruptor: "Renova√ß√£o radical de modelos de neg√≥cio e cria√ß√£o de novos paradigmas."
  }

  return impacts[persona] || "Potencial √∫nico a ser desenvolvido no ambiente empresarial."
}

// Obter potencial de transforma√ß√£o
function getTransformationPotentialV2(persona: PersonaV2): string {
  const potentials: Record<PersonaV2, string> = {
    analitico: "Desenvolve confian√ßa em suas an√°lises e para de buscar valida√ß√£o externa constante.",
    criativo: "Abra√ßa sua 'mente dispersa' como fonte de inova√ß√£o revolucion√°ria e para de se cobrar linearidade.",
    estrategico: "Equilibra vis√£o de longo prazo com execu√ß√£o no presente, evitando paralisia por an√°lise.",
    executor: "Aprende a valorizar planejamento estrat√©gico sem perder sua capacidade de execu√ß√£o r√°pida.",
    inovador: "Desenvolve paci√™ncia para implementa√ß√£o e para de abandonar projetos pela pr√≥xima ideia.",
    lider: "Fortalece habilidades de escuta ativa e lideran√ßa inclusiva, n√£o apenas diretiva.",
    comunicador: "Aprende a ouvir tanto quanto fala e desenvolve comunica√ß√£o assertiva quando necess√°rio.",
    colaborativo: "Desenvolve capacidade de lideran√ßa individual quando a situa√ß√£o exige decis√µes solo.",
    resiliente: "Aprende a celebrar vit√≥rias e n√£o apenas focar na pr√≥xima adversidade a superar.",
    adaptavel: "Desenvolve consist√™ncia em valores core mesmo sendo flex√≠vel em m√©todos.",
    visionario: "Aprende a comunicar vis√µes de forma tang√≠vel e execut√°vel para outros.",
    pragmatico: "Equilibra efici√™ncia com inova√ß√£o, evitando rigidez excessiva a mudan√ßas.",
    empatico: "Desenvolve limites saud√°veis e aprende a fazer decis√µes dif√≠ceis quando necess√°rio.",
    competitivo: "Aprende a celebrar vit√≥rias de outros e desenvolve lideran√ßa colaborativa.",
    detalhista: "Equilibra perfeccionismo com agilidade, evitando paralisia por detalhes excessivos.",
    intuitivo: "Aprende a validar intui√ß√µes com dados quando poss√≠vel, criando confian√ßa em outros.",
    metodico: "Desenvolve flexibilidade em processos quando a situa√ß√£o exige adapta√ß√£o r√°pida.",
    inspirador: "Aprende a manter consist√™ncia entre discurso e a√ß√£o, fortalecendo credibilidade.",
    negociador: "Desenvolve capacidade de tomar decis√µes unilaterais quando negocia√ß√£o n√£o √© vi√°vel.",
    investigador: "Equilibra investiga√ß√£o profunda com agilidade em decis√µes sob press√£o de tempo.",
    mentor: "Aprende a desenvolver independ√™ncia em mentorados ao inv√©s de depend√™ncia.",
    aventureiro: "Desenvolve consist√™ncia e follow-through em projetos de longo prazo.",
    tradicionalista: "Aprende a abra√ßar mudan√ßas positivas sem abandonar valores fundamentais.",
    transformador: "Desenvolve paci√™ncia com ritmo de mudan√ßa de outros e sustentabilidade nas transforma√ß√µes.",
    harmonizador: "Aprende a lidar com conflitos necess√°rios e tomar decis√µes que podem gerar desconforto tempor√°rio.",
    disruptor: "Desenvolve diplomacia e tato para implementar mudan√ßas sem criar resist√™ncia desnecess√°ria."
  }

  return potentials[persona] || "Potencial de crescimento √∫nico baseado em suas caracter√≠sticas naturais."
}