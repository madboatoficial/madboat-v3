#!/bin/bash

# üêô MadBoat Universal Agent Launcher
# @file .agents/bin/agent
# @version 1.0.0
# @created 2025-09-06
# @modified 2025-09-06
# @author Claude Sonnet 4 + Captain Sandro Fidelis
# @description Universal launcher for all MadBoat agents with RLVR

CYAN='\033[0;36m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

show_help() {
    echo -e "${CYAN}üêô MADBOAT UNIVERSAL AGENT LAUNCHER${NC}"
    echo "=================================================="
    echo ""
    echo "AVAILABLE AGENTS:"
    echo -e "  ${GREEN}kraken${NC}               - TypeScript Development Specialist"
    echo -e "  ${BLUE}poseidon${NC}              - Database Operations Specialist" 
    echo -e "  ${PURPLE}mandarin-fish${NC}        - UI/React Development Specialist"
    echo -e "  ${YELLOW}uncle-mcduck${NC}         - Mathematical Computation Specialist"
    echo -e "  ${CYAN}ulisses${NC}               - NLP/Chronicle Specialist"
    echo -e "  ${PURPLE}thaumoctopus${NC}         - Git/Version Control Master"
    echo -e "  ${PURPLE}oyster${NC}               - Supreme RLVR Agent Constructor"
    echo -e "  ${WHITE}uni-meta-orchestrator${NC} - System Coherence Orchestrator"
    echo ""
    echo "USAGE:"
    echo -e "  ${GREEN}agent kraken${NC}        - Launch Kraken"
    echo -e "  ${GREEN}agent poseidon${NC}      - Launch Poseidon"
    echo -e "  ${GREEN}agent mandarin-fish${NC} - Launch Mandarin Fish"
    echo -e "  ${GREEN}agent status${NC}        - Show RLVR status"
    echo -e "  ${GREEN}agent test${NC}          - Test RLVR framework"
    echo ""
    echo "RLVR STATUS:"
    if [ -f "packages/rlvr/package.json" ]; then
        echo -e "  ${GREEN}‚úÖ RLVR Framework: AVAILABLE${NC}"
        echo -e "  ${GREEN}‚úÖ Auto-learning: ENABLED${NC}"
    else
        echo -e "  ${RED}‚ùå RLVR Framework: NOT FOUND${NC}"
        echo -e "  ${YELLOW}‚ö†Ô∏è  Auto-learning: DISABLED${NC}"
    fi
}

show_status() {
    echo -e "${CYAN}üêô MADBOAT RLVR STATUS${NC}"
    echo "=================================================="
    
    # Check RLVR Framework
    echo -e "${YELLOW}RLVR FRAMEWORK:${NC}"
    if [ -f "packages/rlvr/package.json" ]; then
        VERSION=$(grep '"version"' packages/rlvr/package.json | cut -d'"' -f4)
        echo -e "  ${GREEN}‚úÖ Framework: Available (v$VERSION)${NC}"
        echo -e "  ${GREEN}‚úÖ Location: packages/rlvr/${NC}"
    else
        echo -e "  ${RED}‚ùå Framework: Not found${NC}"
        return 1
    fi
    
    # Check Agent Scripts
    echo ""
    echo -e "${YELLOW}AGENT SCRIPTS:${NC}"
    local agents=("kraken-rlvr" "poseidon" "mandarin-fish" "uncle-mcduck" "ulisses" "thaumoctopus" "oyster" "uni-meta-orchestrator")
    for agent in "${agents[@]}"; do
        if [ -f ".agents/bin/$agent" ]; then
            echo -e "  ${GREEN}‚úÖ $agent: Available${NC}"
        else
            echo -e "  ${RED}‚ùå $agent: Missing${NC}"
        fi
    done
    
    # Check Configuration
    echo ""
    echo -e "${YELLOW}CONFIGURATION:${NC}"
    if [ -f ".agents/rlvr-activation.yaml" ]; then
        echo -e "  ${GREEN}‚úÖ RLVR Config: Available${NC}"
    else
        echo -e "  ${RED}‚ùå RLVR Config: Missing${NC}"
    fi
    
    # Test Framework
    echo ""
    echo -e "${YELLOW}QUICK TEST:${NC}"
    if [ -f "packages/rlvr/package.json" ]; then
        cd packages/rlvr 2>/dev/null
        if npm test --silent 2>/dev/null | grep -q "PASS"; then
            echo -e "  ${GREEN}‚úÖ Framework Tests: PASSING${NC}"
        else
            echo -e "  ${YELLOW}‚ö†Ô∏è  Framework Tests: Check needed${NC}"
        fi
        cd - >/dev/null 2>&1
    fi
}

test_rlvr() {
    echo -e "${CYAN}üß™ TESTING RLVR FRAMEWORK${NC}"
    echo "=================================================="
    
    if [ ! -f "packages/rlvr/package.json" ]; then
        echo -e "${RED}‚ùå RLVR framework not found${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}Running RLVR tests...${NC}"
    cd packages/rlvr
    npm test
    cd - >/dev/null
}

launch_agent() {
    local agent=$1
    
    case "$agent" in
        "kraken")
            if [ -f ".kraken/bin/kraken" ]; then
                echo -e "${GREEN}üêô Launching Kraken via unified system...${NC}"
                .kraken/bin/kraken
            else
                echo -e "${RED}‚ùå Kraken system not found${NC}"
            fi
            ;;
        "poseidon")
            if [ -f ".agents/bin/poseidon" ]; then
                .agents/bin/poseidon
            else
                echo -e "${RED}‚ùå Poseidon script not found${NC}"
            fi
            ;;
        "mandarin-fish"|"mandarin_fish")
            if [ -f ".agents/bin/mandarin-fish" ]; then
                .agents/bin/mandarin-fish
            else
                echo -e "${RED}‚ùå Mandarin Fish script not found${NC}"
            fi
            ;;
        "uncle-mcduck"|"uncle_mcduck")
            if [ -f ".agents/bin/uncle-mcduck" ]; then
                .agents/bin/uncle-mcduck
            else
                echo -e "${RED}‚ùå Uncle McDuck script not found${NC}"
            fi
            ;;
        "ulisses")
            if [ -f ".agents/bin/ulisses" ]; then
                .agents/bin/ulisses
            else
                echo -e "${RED}‚ùå Ulisses script not found${NC}"
            fi
            ;;
        "thaumoctopus")
            if [ -f ".agents/bin/thaumoctopus" ]; then
                .agents/bin/thaumoctopus
            else
                echo -e "${RED}‚ùå Thaumoctopus script not found${NC}"
            fi
            ;;
        "oyster"|"ostra")  # Support both names for transition
            if [ -f ".agents/bin/oyster" ]; then
                .agents/bin/oyster
            elif [ -f ".agents/bin/ostra" ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  Using legacy ostra name - please use 'oyster' instead${NC}"
                .agents/bin/ostra
            else
                echo -e "${RED}‚ùå Oyster script not found${NC}"
            fi
            ;;
        "uni-meta-orchestrator"|"uni")
            if [ -f ".agents/bin/uni-meta-orchestrator" ]; then
                .agents/bin/uni-meta-orchestrator
            else
                echo -e "${RED}‚ùå UNI Meta-Orchestrator script not found${NC}"
            fi
            ;;
        *)
            echo -e "${RED}‚ùå Unknown agent: $agent${NC}"
            show_help
            ;;
    esac
}

# Main command processing
case "$1" in
    "")
        show_help
        ;;
    "status")
        show_status
        ;;
    "test")
        test_rlvr
        ;;
    "help"|"--help"|"-h")
        show_help
        ;;
    *)
        launch_agent "$1"
        ;;
esac