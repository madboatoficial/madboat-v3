#!/bin/bash

# üêô Kraken RLVR Auto-Activation Script
# @file .agents/bin/kraken-rlvr
# @version 1.0.0  
# @created 2025-09-06
# @modified 2025-09-06
# @author Claude Sonnet 4 + Captain Sandro Fidelis
# @description Auto-activate RLVR when Kraken is invoked

# Colors
CYAN='\033[0;36m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${CYAN}üêô KRAKEN RLVR AUTO-ACTIVATION${NC}"
echo "=================================================="

# Check if RLVR framework is available
if [ ! -f "packages/rlvr/package.json" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  RLVR framework not found. Using standard mode.${NC}"
    exit 0
fi

echo -e "${GREEN}‚úÖ RLVR Framework detected${NC}"
echo -e "${GREEN}‚úÖ Auto-activating Kraken with RLVR${NC}"

# Display activation message
cat << 'EOF'

üêô **KRAKEN RLVR AUTO-ACTIVATED**

You are now operating with RLVR (Reinforcement Learning from Verifiable Rewards).

MANDATORY INITIALIZATION:
```typescript
import { Agent, getAgentPreset } from '@madboat/rlvr';

const { verifiers, rewards } = getAgentPreset('kraken');
const kraken = new Agent({
  name: 'Kraken-RLVR',
  verifiers,
  rewards,
  learningRate: 0.1,
  explorationRate: 0.2
});
```

EVERY TASK MUST USE:
```typescript
const result = await kraken.executeAndLearn(
  input,
  () => yourTypeScriptGeneration(),
  expectedOutput
);

// ALWAYS REPORT
console.log({
  score: result.verification.score,
  reward: result.reward.reward,
  learned: result.learned,
  patterns: result.verification.learnedPattern
});
```

SPECIALIZATION: TypeScript development, strict mode, code quality
VERIFIERS: TypeScript compilation, code execution, semantic analysis, performance
REWARDS: Binary correctness, graded quality, composite assessment

‚ö†Ô∏è  CRITICAL: Every output must pass RLVR verification (‚â•70% score)
üéØ TARGET: 80%+ success rate, continuous pattern learning

EOF

echo -e "${GREEN}üöÄ Kraken RLVR mode ACTIVE!${NC}"
echo ""