#!/bin/bash

# üêô Thaumoctopus Agent Launcher with RLVR
# @file .agents/bin/thaumoctopus
# @version 1.0.0
# @created 2025-09-06
# @modified 2025-09-06
# @author Claude Sonnet 4 + Captain Sandro Fidelis
# @description Thaumoctopus Git master with RLVR auto-activation

CYAN='\033[0;36m'
GREEN='\033[0;32m'
PURPLE='\033[0;35m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${PURPLE}üêô THAUMOCTOPUS GIT MASTER${NC}"
echo "=================================================="

# Check RLVR availability
if [ -f "packages/rlvr/package.json" ]; then
    echo -e "${GREEN}‚úÖ RLVR Framework detected${NC}"
    echo -e "${CYAN}üöÄ Auto-activating Thaumoctopus with RLVR...${NC}"
    echo ""
    
    cat << 'EOF'

üêô **THAUMOCTOPUS RLVR AUTO-ACTIVATED**

You are now operating with RLVR for Git operations and version control mastery.

MANDATORY INITIALIZATION:
```typescript
import { Agent, getAgentPreset } from '@madboat/rlvr';

// Note: Thaumoctopus uses custom verifiers for Git operations
const { verifiers, rewards } = createCustomStack({
  name: 'Thaumoctopus Git Stack',
  verifiers: [
    { type: 'semantic', config: { 
      businessRules: ['must_contain:git', 'format:shell'], 
      gitCompliance: true 
    }},
    { type: 'performance', config: { 
      maxExecutionTime: 10000,
      gitOperationTimeout: 30000
    }}
  ],
  rewards: [
    { type: 'binary', config: { 
      name: 'git_success', 
      passThreshold: 0.9 
    }},
    { type: 'graded', config: { 
      name: 'git_quality', 
      curve: 'exponential' 
    }}
  ]
});

const thaumoctopus = new Agent({
  name: 'Thaumoctopus-RLVR',
  verifiers,
  rewards,
  learningRate: 0.15 // Higher learning rate for Git patterns
});
```

EVERY GIT TASK MUST USE:
```typescript
const result = await thaumoctopus.executeAndLearn(
  { 
    operation: 'merge_conflict_resolution',
    repository: 'madboat-v2',
    safety_level: 'high'
  },
  () => yourGitCommandExecution(),
  expectedGitState
);

// ALWAYS REPORT
console.log({
  score: result.verification.score,
  reward: result.reward.reward,
  gitIntegrity: result.verification.breakdown?.git_integrity,
  branchSafety: result.verification.breakdown?.branch_safety,
  commitQuality: result.verification.breakdown?.commit_quality
});
```

SPECIALIZATION: Git mastery, branch management, merge conflict resolution, CI/CD
FOCUS: Repository integrity, clean history, safe operations, automation
VERIFIERS: Git command validation, repository state verification, safety checks

‚ö†Ô∏è  GIT REQUIREMENTS:
- Safety first: Never force push to main/master
- Clean history: Meaningful commit messages, logical structure
- Conflict resolution: Preserve all necessary changes
- Branch strategy: Follow GitFlow or agreed conventions
- Backup safety: Always verify before destructive operations

üéØ TARGET: Perfect repository management, zero data loss, optimal workflows

EOF

else
    echo -e "${YELLOW}‚ö†Ô∏è  RLVR not available - using standard mode${NC}"
    echo -e "${PURPLE}üêô Thaumoctopus Git Master (Standard Mode)${NC}"
fi

echo -e "${GREEN}‚ö° Thaumoctopus ready for Git mastery!${NC}"