#!/bin/bash

# 🐙 KRAKEN UNIFIED - Sistema Consolidado de Contexto
# Version: 3.0 - Single Source of Truth Edition
# Purpose: Eliminar confusão com múltiplos arquivos de contexto

# ====================================
# CONFIGURAÇÃO CENTRALIZADA
# ====================================

# ÚNICO diretório de contexto (eliminando duplicação)
KRAKEN_HOME=".kraken"
CONTEXT_FILE="$KRAKEN_HOME/context.yaml"
BACKUP_DIR="$KRAKEN_HOME/backups"
SESSION_LOG="$KRAKEN_HOME/session.log"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ====================================
# FUNÇÃO: Inicializar Sistema
# ====================================
init_kraken() {
    echo -e "${CYAN}🐙 KRAKEN UNIFIED SYSTEM${NC}"
    echo "======================================"
    
    # Criar estrutura unificada
    mkdir -p "$KRAKEN_HOME"
    mkdir -p "$BACKUP_DIR"
    
    # Migrar contexto existente se necessário
    if [ ! -f "$CONTEXT_FILE" ]; then
        if [ -f ".kraken/context_cumulative.yaml" ]; then
            echo -e "${YELLOW}📦 Migrando contexto antigo...${NC}"
            cp ".kraken/context_cumulative.yaml" "$CONTEXT_FILE"
        elif [ -f ".madboat/context_cumulative.yaml" ]; then
            echo -e "${YELLOW}📦 Migrando contexto do .madboat...${NC}"
            cp ".madboat/context_cumulative.yaml" "$CONTEXT_FILE"
        else
            echo -e "${GREEN}✨ Criando novo contexto...${NC}"
            create_new_context
        fi
    fi
    
    # Remover duplicações antigas (opcional - comentado por segurança)
    # rm -rf .madboat/context_cumulative.yaml
    # rm -rf .kraken/context_cumulative.yaml
    
    echo -e "${GREEN}✅ Sistema unificado pronto!${NC}"
    echo ""
}

# ====================================
# FUNÇÃO: Criar Novo Contexto
# ====================================
create_new_context() {
    cat > "$CONTEXT_FILE" << 'EOF'
# 🐙 KRAKEN UNIFIED CONTEXT
# Single Source of Truth - No Duplicates!
# Auto-managed by kraken-unified system

version: "3.0"
last_update: "$(date +"%Y-%m-%d %H:%M:%S")"

project:
  name: "MadBoat v2.0"
  phase: "Initial"
  completion: 0
  
sessions: []

kraken:
  level: 4
  xp: 570
  traits: ["orchestrator", "unified_manager"]
EOF
}

# ====================================
# FUNÇÃO: Ler Contexto (kraken)
# ====================================
read_context() {
    echo -e "${BLUE}📚 READING UNIFIED CONTEXT${NC}"
    echo "----------------------------------------"
    
    if [ -f "$CONTEXT_FILE" ]; then
        echo -e "${GREEN}✅ Contexto encontrado:${NC} $CONTEXT_FILE"
        echo ""
        
        # Mostrar resumo
        echo -e "${CYAN}RESUMO EXECUTIVO:${NC}"
        grep -A 3 "^project:" "$CONTEXT_FILE" | sed 's/^/  /'
        echo ""
        
        # Última sessão
        echo -e "${CYAN}ÚLTIMA SESSÃO:${NC}"
        grep "last_update:" "$CONTEXT_FILE" | sed 's/^/  /'
        echo ""
        
        # Status Kraken
        echo -e "${CYAN}KRAKEN STATUS:${NC}"
        grep -A 3 "^kraken:" "$CONTEXT_FILE" | sed 's/^/  /'
        echo ""
        
        echo -e "${PURPLE}💡 Dica: Use 'cat $CONTEXT_FILE' para ver contexto completo${NC}"
    else
        echo -e "${RED}❌ Contexto não encontrado!${NC}"
        echo "Execute '$0 init' primeiro"
    fi
}

# ====================================
# FUNÇÃO: Salvar Contexto (ks)
# ====================================
save_context() {
    echo -e "${YELLOW}💾 SAVING CONTEXT${NC}"
    echo "----------------------------------------"
    
    # Backup automático
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    BACKUP_FILE="$BACKUP_DIR/context_$TIMESTAMP.yaml"
    
    if [ -f "$CONTEXT_FILE" ]; then
        cp "$CONTEXT_FILE" "$BACKUP_FILE"
        echo -e "${GREEN}✅ Backup criado:${NC} $BACKUP_FILE"
    fi
    
    # Adicionar sessão atual
    cat >> "$CONTEXT_FILE" << EOF

# Session $(date +"%Y-%m-%d %H:%M")
session_$(date +"%Y%m%d_%H%M"):
  date: "$(date +"%Y-%m-%d")"
  time: "$(date +"%H:%M:%S")"
  accomplishments:
    - "Session saved automatically"
  notes: "Added by kraken-unified system"
EOF
    
    # Atualizar last_update
    sed -i '' "s/last_update:.*/last_update: \"$(date +"%Y-%m-%d %H:%M:%S")\"/" "$CONTEXT_FILE"
    
    echo -e "${GREEN}✅ Contexto salvo com sucesso!${NC}"
    echo ""
    
    # Limpar backups antigos (manter últimos 10)
    echo -e "${CYAN}🧹 Limpando backups antigos...${NC}"
    ls -t "$BACKUP_DIR"/context_*.yaml 2>/dev/null | tail -n +11 | xargs rm -f 2>/dev/null
    echo -e "${GREEN}✅ Mantendo apenas 10 backups mais recentes${NC}"
}

# ====================================
# FUNÇÃO: Status (kst)
# ====================================
show_status() {
    echo -e "${PURPLE}📊 KRAKEN STATUS${NC}"
    echo "======================================"
    
    # Verificar estrutura
    echo -e "${CYAN}ESTRUTURA DO SISTEMA:${NC}"
    echo -e "  Diretório Principal: ${GREEN}$KRAKEN_HOME${NC}"
    echo -e "  Arquivo de Contexto: ${GREEN}$CONTEXT_FILE${NC}"
    echo -e "  Diretório de Backup: ${GREEN}$BACKUP_DIR${NC}"
    echo ""
    
    # Tamanho dos arquivos
    echo -e "${CYAN}TAMANHO DOS ARQUIVOS:${NC}"
    if [ -f "$CONTEXT_FILE" ]; then
        SIZE=$(wc -l < "$CONTEXT_FILE")
        echo -e "  Contexto Principal: ${GREEN}$SIZE linhas${NC}"
    fi
    
    BACKUP_COUNT=$(ls "$BACKUP_DIR"/context_*.yaml 2>/dev/null | wc -l | tr -d ' ')
    echo -e "  Backups Salvos: ${GREEN}$BACKUP_COUNT arquivos${NC}"
    echo ""
    
    # Verificar duplicações antigas
    echo -e "${CYAN}VERIFICANDO DUPLICAÇÕES:${NC}"
    if [ -f ".madboat/context_cumulative.yaml" ]; then
        echo -e "  ${YELLOW}⚠️  Encontrado: .madboat/context_cumulative.yaml${NC}"
        echo -e "     ${PURPLE}Recomendo: rm .madboat/context_cumulative.yaml${NC}"
    fi
    
    if [ -f ".kraken/context_cumulative.yaml" ]; then
        echo -e "  ${YELLOW}⚠️  Encontrado: .kraken/context_cumulative.yaml (antigo)${NC}"
        echo -e "     ${PURPLE}Será migrado para: $CONTEXT_FILE${NC}"
    fi
    
    if [ ! -f ".madboat/context_cumulative.yaml" ] && [ ! -f ".kraken/context_cumulative.yaml" ]; then
        echo -e "  ${GREEN}✅ Nenhuma duplicação encontrada!${NC}"
    fi
    echo ""
    
    # Agentes disponíveis
    echo -e "${CYAN}AGENTES DISPONÍVEIS:${NC}"
    echo "  🔱 Poseidon (Database)"
    echo "  🐠 Mandarin Fish (UI)"
    echo "  📜 Ulisses (Narrative)"
    echo "  🦪 Ostra (Agent Creator)"
    echo "  🐙 Thaumoctopus (Git)"
    echo ""
    
    echo -e "${GREEN}Sistema Unificado Operacional!${NC}"
}

# ====================================
# FUNÇÃO: Limpar Sistema (clean)
# ====================================
clean_system() {
    echo -e "${RED}🧹 LIMPEZA DO SISTEMA${NC}"
    echo "======================================"
    echo -e "${YELLOW}⚠️  ATENÇÃO: Isso removerá duplicações!${NC}"
    echo ""
    
    read -p "Deseja continuar? (y/n): " -n 1 -r
    echo ""
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Fazer backup de segurança
        SAFETY_BACKUP="/tmp/kraken_safety_backup_$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$SAFETY_BACKUP"
        
        echo -e "${CYAN}📦 Criando backup de segurança...${NC}"
        [ -f ".madboat/context_cumulative.yaml" ] && cp ".madboat/context_cumulative.yaml" "$SAFETY_BACKUP/"
        [ -f ".kraken/context_cumulative.yaml" ] && cp ".kraken/context_cumulative.yaml" "$SAFETY_BACKUP/"
        
        echo -e "${GREEN}✅ Backup salvo em: $SAFETY_BACKUP${NC}"
        echo ""
        
        # Remover duplicações
        echo -e "${YELLOW}🗑️  Removendo arquivos duplicados...${NC}"
        rm -f ".madboat/context_cumulative.yaml"
        rm -f ".kraken/context_cumulative.yaml"
        
        echo -e "${GREEN}✅ Sistema limpo! Use apenas: $CONTEXT_FILE${NC}"
    else
        echo -e "${BLUE}Operação cancelada${NC}"
    fi
}

# ====================================
# FUNÇÃO: Ajuda
# ====================================
show_help() {
    echo -e "${CYAN}🐙 KRAKEN UNIFIED SYSTEM - HELP${NC}"
    echo "======================================"
    echo ""
    echo "COMANDOS:"
    echo -e "  ${GREEN}$0${NC}         - Ler contexto (kraken)"
    echo -e "  ${GREEN}$0 save${NC}    - Salvar contexto (ks)"
    echo -e "  ${GREEN}$0 status${NC}  - Ver status (kst)"
    echo -e "  ${GREEN}$0 init${NC}    - Inicializar sistema"
    echo -e "  ${GREEN}$0 clean${NC}   - Limpar duplicações"
    echo -e "  ${GREEN}$0 help${NC}    - Mostrar esta ajuda"
    echo ""
    echo "ALIASES RECOMENDADOS (.zshrc):"
    echo -e "  ${PURPLE}alias kraken='$0'${NC}"
    echo -e "  ${PURPLE}alias ks='$0 save'${NC}"
    echo -e "  ${PURPLE}alias kst='$0 status'${NC}"
    echo ""
    echo "BENEFÍCIOS:"
    echo "  ✅ Um único arquivo de contexto"
    echo "  ✅ Salvamento automático"
    echo "  ✅ Backups gerenciados"
    echo "  ✅ Sem duplicações"
    echo "  ✅ Sem confusão!"
    echo ""
    echo -e "${GREEN}~ From chaos, unified order ~${NC}"
}

# ====================================
# MAIN - Processar Comando
# ====================================

# Sempre inicializar primeiro
init_kraken > /dev/null 2>&1

case "$1" in
    "")
        read_context
        ;;
    "save"|"s")
        save_context
        ;;
    "status"|"st")
        show_status
        ;;
    "init")
        init_kraken
        ;;
    "clean")
        clean_system
        ;;
    "help"|"h"|"--help"|"-h")
        show_help
        ;;
    *)
        echo -e "${RED}Comando não reconhecido: $1${NC}"
        show_help
        ;;
esac